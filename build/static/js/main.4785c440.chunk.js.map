{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCKjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKJ,UAAU,SACVI,I,gBCRPC,EAAU,0DAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVvCK,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uGA8FGC,EAzFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,0BAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAOdC,qBAAU,WACNC,IAEKvB,MAAK,SAAAwB,GACFT,EAASS,QAElB,IAEH,IAwCMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAEhC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcK,QAASwB,IACvB,6BACI,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLxC,KAAMA,EACNC,iBAAkB,kBAtCX,SAAAgB,GACvB,IAAMjB,EAAO0B,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,eAAQ5C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDgC,EACYlB,EAAI2B,GACXhC,MAAK,SAAAiC,GACFlB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAO6C,SAEtDC,OAAM,SAAAC,GACHd,EAAgB,SAAD,OACFjC,EAAKK,QADH,sCAGf2C,YAAW,WACPf,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAE1B,KAAOA,SAsBJgC,CAAmBjD,EAAKiB,WAI5D,0BAAMiC,SA9DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfhD,QAASuB,EACT0B,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG/BvB,EACYkB,GACPzC,MAAK,SAAAiC,GACFlB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,SAmDX,2BACI+B,MAAOhC,EACPiC,SAjDS,SAACV,GACtBtB,EAAWsB,EAAMW,OAAOF,UAkDhB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MCnGZC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.4785c440.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'https://mighty-brushlands-01156.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.5,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}